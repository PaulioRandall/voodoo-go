./voodoo run "$0" "$@"; exit "$?"

// Type assertions for later
// calc <- do(a.(float), b.(int), c.(int)) r.(float)
//   r <- a + b * c
// done

calc <- func(a, b, c) r
  r <- a + b * c
done

safeDivide <- func(a, b) c, err
  when
    b == 0 => err <- "Can't divide by zero"
    _      => c <- a / b
  done
done

onErr <- func(err)
  when
    err != _ => @Println(err)
                @Exit(1)
  done
done

sumSeries <- func(n) sum
  loop _, v, _ <- @Range(1, n)
    // I wonder if there's a more efficient way to do this... ^^
    sum == _ => sum <- 0
    sum <- sum + v
  done
done

printList <- func(list,delim)
  loop _, v, more <- list
    @Print("[")
    when
      more => @Print("${v} ${delim}")
      _    => @Print("${v}")
    done
    @Println("]")
  done
done

x, y, z <- 9, 3, 0
  
r <- calc(x,y,z)
when
  r == 2 => @Println(":(")
  r == 9 => @Println(":)")
  _ => @Break(func)
done
  
_, err <- safeDivide(2, 0)
onErr(err)
  
str <- "abc123"
list <- []
loop
  i == _ => i <- 0
  r <- str[i]
  @Append(list, r)
  @Break(loop)
done
  
printList(list, ",")

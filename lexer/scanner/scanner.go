package scanner

import (
	"github.com/PaulioRandall/voodoo-go/fault"
	"github.com/PaulioRandall/voodoo-go/runer"
	"github.com/PaulioRandall/voodoo-go/symbol"
)

// TODO: Delete me
func tokenToLexeme(tk *symbol.Token) *symbol.Lexeme {
	s := symbol.Symbol(*tk)
	l := symbol.Lexeme(s)
	return &l
}

// Scan scans a line and creates an array of lexemes based on
// the grammer rules of the language. Longest match is used to
// identify variable names and keywords etc.
//
// No panic is generated by the scanner so if a panic occurs it's
// either a system issue or a bug.
func Scan(in string) (out []symbol.Lexeme, err fault.Fault) {

	if in == `` {
		out = []symbol.Lexeme{}
		return
	}

	itr := runer.NewRuneItr(in)

	for itr.HasNext() {
		var l *symbol.Lexeme

		switch {
		case itr.IsNextLetter():
			tk := scanWord(itr)
			l = tokenToLexeme(tk)
		case itr.IsNextDigit():
			l, err = scanNumber(itr)
		case itr.IsNextSpace():
			l = scanSpace(itr)
		case itr.IsNext('@'):
			l, err = scanSpell(itr)
		case itr.IsNext('"'):
			l, err = scanString(itr)
		case itr.IsNextStr(`//`):
			l = scanComment(itr)
		default:
			l, err = scanSymbol(itr)
		}

		if err != nil {
			out = nil
			break
		}

		out = append(out, *l)
	}

	return
}
